{"version":3,"sources":["Button.tsx","Display.tsx","SettingsDisplay.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","props","className","disable","onClick","title","Display","count","maxValue","error","SettingsDisplay","invisibleMaxValue","invisibleMinValue","value","onChange","e","setInvisibleMaxValue","currentTarget","type","setInvisibleMinValue","setMinValue","setMaxValue","setScore","localStorage","setItem","String","App","min","getItem","max","useState","score","minValue","Number","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"4OASO,SAASA,EAAOC,GACnB,OACI,6BACI,4BAAQC,UAAWD,EAAME,QAAU,UAAY,SAAUC,QAASH,EAAMG,SAAUH,EAAMI,QCJ7F,SAASC,EAAQL,GACpB,IAAMM,EAA2B,IAAnBN,EAAMO,SAAiB,0BAAMN,UAAW,aAAjB,aAAiDD,EAAMM,MAE5F,OACI,6BACI,yBAAKL,UAAWD,EAAMM,QAAUN,EAAMO,SAAW,aAAe,WAC3DP,EAAMQ,MAAQ,0BAAMP,UAAW,gBAAjB,oBAA2DK,ICDnF,SAASG,EAAgBT,GA2B5B,OACI,yBAAKC,UAAW,WACZ,yBAAKA,UAAW,gBACZ,6BAAK,4CAAiB,2BAClBA,UAAWD,EAAMU,mBAAqBV,EAAMW,kBAAoB,aAAe,cAC/EC,MAAOZ,EAAMU,kBACbG,SAdS,SAACC,GACtBd,EAAMe,sBAAsBD,EAAEE,cAAcJ,QAchCK,KAAM,aACV,6BAAK,4CAAiB,2BAClBhB,UAAWD,EAAMU,mBAAqBV,EAAMW,kBAAoB,aAAe,cAC/EM,KAAM,SACNL,MAAOZ,EAAMW,kBACbE,SAhBS,SAACC,GACtBd,EAAMkB,sBAAsBJ,EAAEE,cAAcJ,aAiBxC,6BACI,kBAACb,EAAD,CAAQI,QAnCpB,WACQH,EAAMU,kBAAoBV,EAAMW,oBAChCX,EAAMmB,YAAYnB,EAAMW,mBACxBX,EAAMoB,YAAYpB,EAAMU,mBACxBV,EAAMqB,SAASrB,EAAMW,mBACrBW,aAAaC,QAAQ,WAAYC,OAAOxB,EAAMW,oBAC9CW,aAAaC,QAAQ,WAAYC,OAAOxB,EAAMU,sBA6BfN,MAAO,MAAOF,QAASF,EAAMU,mBAAqBV,EAAMW,sBCMpFc,MAtDf,WAQI,IAAIC,EAAMJ,aAAaK,QAAQ,YAC3BC,EAAMN,aAAaK,QAAQ,YATpB,EAWaE,mBAAS,GAXtB,mBAWNC,EAXM,KAWCT,EAXD,OAYmBQ,mBAAiB,GAZpC,mBAYNtB,EAZM,KAYIa,EAZJ,OAamBS,mBAAiB,GAbpC,mBAaNE,EAbM,KAaIZ,EAbJ,OAcqCU,mBAAiBG,OAAON,IAd7D,mBAcNf,EAdM,KAcaO,EAdb,OAeqCW,mBAAiBG,OAAOJ,IAf7D,mBAeNlB,EAfM,KAeaK,EAfb,KAoCX,OACI,yBAAKd,UAAU,OACX,yBAAKA,UAAW,WACZ,kBAACI,EAAD,CAASC,MAAOwB,EAAOvB,UAAWA,EAAUC,OAAQE,IAAsBC,IAC1E,yBAAKV,UAAW,WACZ,kBAACF,EAAD,CAAQI,QAxBxB,WACQ2B,EAAQvB,GACRc,EAASS,EAAQ,IAsBoB1B,MAAO,MAAOF,QAAS4B,IAAUvB,IAC9D,kBAACR,EAAD,CAAQI,QAnBxB,WACIkB,EAASU,IAkBiC3B,MAAO,QAASF,QAAS4B,IAAUC,MAGzE,kBAACtB,EAAD,CAAiBC,mBAAoBA,EACpBC,mBAAoBA,EACpBO,qBAAsBA,EACtBH,qBAAsBA,EACtBI,YAAaA,EAAaC,YAAaA,EAAaC,SAAUA,MC5CvEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACL0C,QAAQ1C,MAAMA,EAAM2C,c","file":"static/js/main.4a3a584b.chunk.js","sourcesContent":["import React from 'react';\n\ntype ButtonPropsType = {\n    title: string\n    onClick: () => void\n    disable: boolean\n\n}\n\nexport function Button(props: ButtonPropsType) {\n    return (\n        <div >\n            <button className={props.disable ? \"disable\" : \"button\"} onClick={props.onClick}>{props.title}</button>\n        </div>\n    )\n}\n\n","import React, {useState} from 'react';\n\ntype DisplayPropsType = {\n    count: number\n    maxValue: number\n    error: boolean\n}\n\nexport function Display(props: DisplayPropsType) {\n    const count = props.maxValue === 0 ? <span className={\"errorSpan\"}>Set value</span> : props.count\n\n    return (\n        <div>\n            <div className={props.count === props.maxValue ? \"highNumber\" : \"display\"}>\n                {props.error ? <span className={\"errorMessage\"}>Incorrect values</span> : count}\n            </div>\n        </div>\n    )\n}\n\n\n\n","import React, {ChangeEvent} from \"react\";\r\nimport {Button} from \"./Button\";\r\n\r\ntype SettingsDisplayPropsType = {\r\n    invisibleMaxValue: number\r\n    invisibleMinValue: number\r\n    setScore: (value: number) => void\r\n    setMinValue: (value: number) => void\r\n    setMaxValue: (value: number) => void\r\n    setInvisibleMinValue: (value: number) => void\r\n    setInvisibleMaxValue: (value: number) => void\r\n}\r\n\r\nexport function SettingsDisplay(props: SettingsDisplayPropsType) {\r\n\r\n    /*function saveState<T>(key: string, state: T) {\r\n        const stateAsString = JSON.stringify(state);\r\n        localStorage.setItem(key, stateAsString)\r\n    }*/\r\n\r\n    function setValue() {\r\n        if (props.invisibleMaxValue > props.invisibleMinValue) {\r\n            props.setMinValue(props.invisibleMinValue)\r\n            props.setMaxValue(props.invisibleMaxValue)\r\n            props.setScore(props.invisibleMinValue)\r\n            localStorage.setItem(\"MinValue\", String(props.invisibleMinValue))\r\n            localStorage.setItem(\"MaxValue\", String(props.invisibleMaxValue))\r\n            /*saveState(\"MinValue\", props.invisibleMinValue)\r\n            saveState(\"MaxValue\", props.invisibleMaxValue)*/\r\n        }\r\n    }\r\n\r\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setInvisibleMaxValue(+e.currentTarget.value)\r\n    }\r\n\r\n    const onChangeMinValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setInvisibleMinValue(+e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={\"counter\"}>\r\n            <div className={\"selectNumber\"}>\r\n                <div><label>MaxValue: <input\r\n                    className={props.invisibleMaxValue <= props.invisibleMinValue ? \"errorInput\" : \"originInput\"}\r\n                    value={props.invisibleMaxValue}\r\n                    onChange={onChangeMaxValue}\r\n                    type={\"number\"}/></label></div>\r\n                <div><label>MinValue: <input\r\n                    className={props.invisibleMaxValue <= props.invisibleMinValue ? \"errorInput\" : \"originInput\"}\r\n                    type={\"number\"}\r\n                    value={props.invisibleMinValue}\r\n                    onChange={onChangeMinValue}/></label></div>\r\n            </div>\r\n            <div>\r\n                <Button onClick={setValue} title={\"Set\"} disable={props.invisibleMaxValue <= props.invisibleMinValue}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Button} from \"./Button\";\nimport {Display} from \"./Display\";\nimport {SettingsDisplay} from \"./SettingsDisplay\";\n\n\nfunction App() {\n\n    /*function restoreState<T>(key: string, defaultState: T) {\n        const stateAsString = localStorage.getItem(key);\n        if (stateAsString !== null) defaultState = JSON.parse(stateAsString) as T;\n        return defaultState;\n    }*/\n\n    let min = localStorage.getItem(\"MinValue\")\n    let max = localStorage.getItem(\"MaxValue\")\n\n    let [score, setScore] = useState(0)\n    let [maxValue, setMaxValue] = useState<number>(0)\n    let [minValue, setMinValue] = useState<number>(0)\n    let [invisibleMinValue, setInvisibleMinValue] = useState<number>(Number(min))\n    let [invisibleMaxValue, setInvisibleMaxValue] = useState<number>(Number(max))\n\n    function richNumber() {\n        if (score < maxValue) {\n            setScore(score + 1);\n        }\n    }\n\n    function resetNumber() {\n        setScore(minValue)\n    }\n\n\n\n    /*useEffect(() => {\n        const max = restoreState('MaxValue', invisibleMaxValue)\n        const min = restoreState('MinValue', invisibleMinValue)\n        setInvisibleMaxValue(Number(max))\n        setInvisibleMinValue(Number(min))\n    }, [])*/\n\n    return (\n        <div className=\"App\">\n            <div className={\"counter\"}>\n                <Display count={score} maxValue={+maxValue} error={+invisibleMaxValue <= +invisibleMinValue}/>\n                <div className={\"buttons\"}>\n                    <Button onClick={richNumber} title={\"Inc\"} disable={score === maxValue}/>\n                    <Button onClick={resetNumber} title={\"Reset\"} disable={score === minValue}/>\n                </div>\n            </div>\n            <SettingsDisplay invisibleMaxValue={+invisibleMaxValue}\n                             invisibleMinValue={+invisibleMinValue}\n                             setInvisibleMinValue={setInvisibleMinValue}\n                             setInvisibleMaxValue={setInvisibleMaxValue}\n                             setMinValue={setMinValue} setMaxValue={setMaxValue} setScore={setScore} />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["serviceWorker.ts","redux/counterReducer.ts","redux/store.ts","Components/Button.tsx","Components/SettingsDisplay.tsx","Components/Display.tsx","Components/MainDisplay.tsx","Components/AppWithRedux.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ACTIONS_TYPES","initialState","score","maxValue","minValue","maxSettingsValue","minSettingsValue","rootReducers","combineReducers","counter","state","action","type","SET_SCORE","newScore","SET_MAX_SETTINGS_VALUE","newMaxSettingsValue","SET_MIN_SETTINGS_VALUE","newMinSettingsValue","ENTER_SETTINGS","RESET_VALUE","VALUE_FROM_LOCAL_STORAGE","store","createStore","selectRootState","Button","props","className","disable","onClick","title","SettingsDisplay","useSelector","dispatch","useDispatch","onChangeSettingsValue","e","currentTarget","dataset","value","Number","data-value","onChange","localStorage","setItem","String","Display","count","error","MainDisplay","resetValueAC","AppWithRedux","min","getItem","max","useEffect","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.615ff483.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum ACTIONS_TYPES {\r\n    SET_SCORE = \"SET_SCORE\",\r\n    SET_MAX_SETTINGS_VALUE = \"SET_MAX_SETTINGS_VALUE\",\r\n    SET_MIN_SETTINGS_VALUE = \"SET_MIN_SETTINGS_VALUE\",\r\n    ENTER_SETTINGS = \"ENTER_SETTINGS\",\r\n    RESET_VALUE = \"RESET_VALUE\",\r\n    VALUE_FROM_LOCAL_STORAGE = \"VALUE_FROM_LOCAL_STORAGE\"\r\n}\r\n\r\ntype StateType = {\r\n    score: number\r\n    maxValue: number\r\n    minValue: number\r\n    maxSettingsValue: number\r\n    minSettingsValue: number\r\n}\r\n\r\nlet initialState: StateType = {\r\n    score: 0,\r\n    maxValue: 0,\r\n    minValue: 0,\r\n    maxSettingsValue: 1,\r\n    minSettingsValue: 0\r\n}\r\ntype ActionsType =\r\n    | IncreaseScoreAC\r\n    | SetMinSettingsValueType\r\n    | SetMaxSettingsValueType\r\n    | EnterSettingsType\r\n    | ResetValueType\r\n    | ValueFromLocalStorageType\r\n\r\nexport const counterReducer = (state: StateType = initialState, action: ActionsType): StateType => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPES.SET_SCORE:\r\n            if (state.score < state.maxValue) {\r\n                return {...state, score: action.newScore}\r\n            }\r\n            return state\r\n        case ACTIONS_TYPES.SET_MAX_SETTINGS_VALUE:\r\n            return {...state, maxSettingsValue: action.newMaxSettingsValue}\r\n        case ACTIONS_TYPES.SET_MIN_SETTINGS_VALUE:\r\n            return {...state, minSettingsValue: action.newMinSettingsValue}\r\n        case ACTIONS_TYPES.ENTER_SETTINGS:\r\n            if (state.maxSettingsValue > state.minSettingsValue) {\r\n                return {\r\n                    ...state,\r\n                    maxValue: state.maxSettingsValue,\r\n                    minValue: state.minSettingsValue,\r\n                    score: state.minSettingsValue\r\n                }\r\n            }\r\n            return state\r\n        case ACTIONS_TYPES.RESET_VALUE:\r\n            return {...state, score: action.minValue}\r\n        case ACTIONS_TYPES.VALUE_FROM_LOCAL_STORAGE:\r\n            return { ...state, maxSettingsValue: action.maxValue, minSettingsValue: action.minValue}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype IncreaseScoreAC = {\r\n    type: ACTIONS_TYPES.SET_SCORE\r\n    newScore: number\r\n}\r\nexport const increaseScoreAC = (newScore: number): IncreaseScoreAC => {\r\n    return {\r\n        type: ACTIONS_TYPES.SET_SCORE,\r\n        newScore\r\n    }\r\n}\r\ntype ResetValueType = {\r\n    type: ACTIONS_TYPES.RESET_VALUE\r\n    minValue: number\r\n}\r\nexport const resetValueAC = (minValue: number): ResetValueType => {\r\n    return {\r\n        type: ACTIONS_TYPES.RESET_VALUE,\r\n        minValue\r\n    }\r\n}\r\ntype SetMinSettingsValueType = {\r\n    type: ACTIONS_TYPES.SET_MIN_SETTINGS_VALUE\r\n    newMinSettingsValue: number\r\n}\r\nexport const setMinSettingsValueAC = (newMinSettingsValue: number): SetMinSettingsValueType => {\r\n    return {\r\n        type: ACTIONS_TYPES.SET_MIN_SETTINGS_VALUE,\r\n        newMinSettingsValue\r\n    }\r\n}\r\ntype SetMaxSettingsValueType = {\r\n    type: ACTIONS_TYPES.SET_MAX_SETTINGS_VALUE\r\n    newMaxSettingsValue: number\r\n}\r\nexport const setMaxSettingsValueAC = (newMaxSettingsValue: number): SetMaxSettingsValueType => {\r\n    return {\r\n        type: ACTIONS_TYPES.SET_MAX_SETTINGS_VALUE,\r\n        newMaxSettingsValue\r\n    }\r\n}\r\ntype EnterSettingsType = {\r\n    type: ACTIONS_TYPES.ENTER_SETTINGS\r\n}\r\nexport const enterSettingsAC = (): EnterSettingsType => {\r\n    return {\r\n        type: ACTIONS_TYPES.ENTER_SETTINGS,\r\n    }\r\n}\r\ntype ValueFromLocalStorageType = {\r\n    type: ACTIONS_TYPES.VALUE_FROM_LOCAL_STORAGE\r\n    maxValue: number\r\n    minValue: number\r\n}\r\nexport const valueFromLocalStorageAC = (minValue: number, maxValue: number): ValueFromLocalStorageType => {\r\n    return {\r\n        type: ACTIONS_TYPES.VALUE_FROM_LOCAL_STORAGE,\r\n        maxValue,\r\n        minValue\r\n    }\r\n}","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counterReducer\";\r\n\r\n\r\nconst rootReducers = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducers>\r\n\r\nexport const store = createStore(rootReducers)\r\n\r\nexport const selectRootState = (state: RootStateType) => state.counter;","import React from 'react';\n\ntype ButtonPropsType = {\n    title: string\n    onClick: () => void\n    disable: boolean\n\n}\n\nexport function Button(props: ButtonPropsType) {\n    return (\n        <div >\n            <button className={props.disable ? \"disable\" : \"button\"} onClick={props.onClick}>{props.title}</button>\n        </div>\n    )\n}\n\n","import React, {ChangeEvent} from \"react\";\r\nimport {Button} from \"./Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {enterSettingsAC, setMaxSettingsValueAC, setMinSettingsValueAC} from \"../redux/counterReducer\";\r\nimport {selectRootState} from \"../redux/store\";\r\n\r\nexport function SettingsDisplay() {\r\n\r\n    let {maxSettingsValue, minSettingsValue} = useSelector(selectRootState)\r\n    const dispatch = useDispatch()\r\n\r\n    function setValue() {\r\n        dispatch(enterSettingsAC())\r\n        localStorage.setItem(\"MinValue\", String(minSettingsValue))\r\n        localStorage.setItem(\"MaxValue\", String(maxSettingsValue))\r\n    }\r\n\r\n    const onChangeSettingsValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.dataset.value === \"max\") {\r\n            dispatch(setMaxSettingsValueAC(Number(e.currentTarget.value)))\r\n        } else {\r\n            dispatch(setMinSettingsValueAC(Number(e.currentTarget.value)))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={\"counter\"}>\r\n            <div className={\"selectNumber\"}>\r\n                <div>\r\n                    <label>MaxValue:\r\n                        <input\r\n                            className={maxSettingsValue <= minSettingsValue ? \"errorInput\" : \"originInput\"}\r\n                            value={maxSettingsValue}\r\n                            data-value={\"max\"}\r\n                            onChange={onChangeSettingsValue}\r\n                            type={\"number\"}/>\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <label>MinValue:\r\n                        <input\r\n                            className={maxSettingsValue <= minSettingsValue ? \"errorInput\" : \"originInput\"}\r\n                            type={\"number\"}\r\n                            data-value={\"min\"}\r\n                            value={minSettingsValue}\r\n                            onChange={onChangeSettingsValue}/>\r\n                    </label>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <Button onClick={setValue} title={\"Set\"} disable={maxSettingsValue <= minSettingsValue}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\n\ntype DisplayPropsType = {\n    count: number\n    maxValue: number\n    error: boolean\n}\n\nexport function Display(props: DisplayPropsType) {\n    const count = props.maxValue === 0 ? <span className={\"errorSpan\"}>Set value</span> : props.count\n\n    return (\n        <div>\n            <div className={props.count === props.maxValue ? \"highNumber\" : \"display\"}>\n                {props.error ? <span className={\"errorMessage\"}>Incorrect values</span> : count}\n            </div>\n        </div>\n    )\n}\n\n\n\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectRootState} from \"../redux/store\";\r\nimport {increaseScoreAC, resetValueAC} from \"../redux/counterReducer\";\r\nimport {Display} from \"./Display\";\r\nimport {Button} from \"./Button\";\r\nimport React from \"react\";\r\n\r\nexport function MainDisplay() {\r\n    let {score, maxValue, minValue, maxSettingsValue, minSettingsValue} = useSelector(selectRootState)\r\n    const dispatch = useDispatch()\r\n\r\n    function richNumber() {\r\n        dispatch(increaseScoreAC(score + 1))\r\n    }\r\n\r\n    function resetNumber() {\r\n        dispatch(resetValueAC(minValue))\r\n    }\r\n\r\n    return (\r\n        <div className={\"counter\"}>\r\n            <Display count={score} maxValue={+maxValue} error={+maxSettingsValue <= +minSettingsValue}/>\r\n            <div className={\"buttons\"}>\r\n                <Button onClick={richNumber} title={\"Inc\"} disable={score === maxValue}/>\r\n                <Button onClick={resetNumber} title={\"Reset\"} disable={score === minValue}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from 'react';\nimport '../App.css';\nimport {SettingsDisplay} from \"./SettingsDisplay\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {valueFromLocalStorageAC} from \"../redux/counterReducer\";\nimport {MainDisplay} from \"./MainDisplay\";\n\n\nfunction AppWithRedux() {\n\n    let min = localStorage.getItem(\"MinValue\")\n    let max = localStorage.getItem(\"MaxValue\")\n\n    useEffect(() => {\n        dispatch(valueFromLocalStorageAC(Number(min), Number(max)))\n    }, [])\n\n\n    const dispatch = useDispatch()\n\n    return (\n        <div className=\"App\">\n            <MainDisplay/>\n            <SettingsDisplay/>\n        </div>\n    );\n}\n\nexport default AppWithRedux;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\nimport AppWithRedux from \"./Components/AppWithRedux\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <AppWithRedux/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}